{
    "name": "cond_period_change", // experiments name
    "gpu_ids": [1], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments_cond", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "experiments_cond/train_cond_period_change_240515_200018/checkpoint/150" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "CondGenerationCrossAttn"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_files": [
                        "1-2-2500or5from500sim-dt5-nozero.npy",
                        "1-3-2500or5from500sim-dt5-nozero.npy", 
                        "1-4-2500or5from500sim-dt5-nozero.npy",
                        "1-5-2500or5from500sim-dt5-nozero.npy", 
                        "2-1-2500or5from500sim-dt5-nozero.npy", 
                        "2-2-2500or5from500sim-dt5-nozero.npy", 
                        "2-4-2500or5from500sim-dt5-nozero.npy", 
                        "2-5-2500or5from500sim-dt5-nozero.npy", 
                        "3-1-2500or5from500sim-dt5-nozero.npy", 
                        "3-2-2500or5from500sim-dt5-nozero.npy", 
                        "3-3-2500or5from500sim-dt5-nozero.npy", 
                        "3-4-2500or5from500sim-dt5-nozero.npy", 
                        "4-1-2500or5from500sim-dt5-nozero.npy", 
                        "4-3-2500or5from500sim-dt5-nozero.npy", 
                        "4-4-2500or5from500sim-dt5-nozero.npy", 
                        "4-5-2500or5from500sim-dt5-nozero.npy", 
                        "5-2-2500or5from500sim-dt5-nozero.npy", 
                        "5-3-2500or5from500sim-dt5-nozero.npy", 
                        "5-4-2500or5from500sim-dt5-nozero.npy", 
                        "5-5-2500or5from500sim-dt5-nozero.npy"
                    ],
                    "data_prefix": "/mnt/data1/shared/Diffusion/D-epsilon-npy-2400samples-from500sim-dt5-nozero/", 
                    "param_1": [
                        0.00025, 0.0005, 0.001, 0.00175, 0.0275
                    ],
                    "param_2": [
                        0.0035, 0.0285, 0.0535, 0.0785, 0.1035
                    ],
                    "image_size": 64
                } 
            },
            "dataloader":{
                "validation_split": 128, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 16, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 16, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "CondGenerationCrossAttn", // import Dataset() class / function(not recommend) from default file
                "args":{ // arguments to initialize dataset
                    "data_files": [
                        "1-1-2500or5from500sim-dt5-nozero.npy",
                        "2-3-2500or5from500sim-dt5-nozero.npy",
                        "3-5-2500or5from500sim-dt5-nozero.npy",
                        "4-2-2500or5from500sim-dt5-nozero.npy",
                        "5-1-2500or5from500sim-dt5-nozero.npy",
                        
                        // train

                        "1-2-2500or5from500sim-dt5-nozero.npy",
                        "1-3-2500or5from500sim-dt5-nozero.npy", 
                        "1-4-2500or5from500sim-dt5-nozero.npy", 
                        "1-5-2500or5from500sim-dt5-nozero.npy", 
                        "2-1-2500or5from500sim-dt5-nozero.npy", 
                        "2-2-2500or5from500sim-dt5-nozero.npy", 
                        "2-4-2500or5from500sim-dt5-nozero.npy", 
                        "2-5-2500or5from500sim-dt5-nozero.npy", 
                        "3-1-2500or5from500sim-dt5-nozero.npy", 
                        "3-2-2500or5from500sim-dt5-nozero.npy", 
                        "3-3-2500or5from500sim-dt5-nozero.npy", 
                        "3-4-2500or5from500sim-dt5-nozero.npy", 
                        "4-1-2500or5from500sim-dt5-nozero.npy", 
                        "4-3-2500or5from500sim-dt5-nozero.npy", 
                        "4-4-2500or5from500sim-dt5-nozero.npy", 
                        "4-5-2500or5from500sim-dt5-nozero.npy", 
                        "5-2-2500or5from500sim-dt5-nozero.npy", 
                        "5-3-2500or5from500sim-dt5-nozero.npy", 
                        "5-4-2500or5from500sim-dt5-nozero.npy", 
                        "5-5-2500or5from500sim-dt5-nozero.npy"
                    ],
                    "data_prefix": "/mnt/data1/shared/Diffusion/D-epsilon-npy-2400samples-from500sim-dt5-nozero/", 
                    "param_1": [
                        0.00025, 0.0005, 0.001, 0.00175, 0.0275
                    ],
                    "param_2": [
                        0.0035, 0.0285, 0.0535, 0.0785, 0.1035
                    ],
                    "image_size": 64
                } 
            },
            "dataloader":{
                "args":{
                    "batch_size": 64,
                    "num_workers": 4,
                    "pin_memory": true,
                    "shuffle": false
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "colorization",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 1e-4, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 10,
                        "out_channel": 10,
                        "inner_channel": 128,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            4, 8
                            // 8
                        ],
                        "num_head_channels": 64,
                        "cross_attn_dim": 3,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64,
                        "use_new_attention_order": true,
                        "max_periods": [0.25, 0.75, 0.25]
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 4000,
                            // "n_timestep": 5, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 5, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e4, // log every specified number of iterations
        "tensorboard" : true // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 1,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
